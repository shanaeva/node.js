Index: hometask_2/controllers/user.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from 'express';\nimport { getUsersList, getUser, createUser, deleteUser, updateUser, getAutoSuggestUsers } from '../services/user';\nimport { createValidator } from 'express-joi-validation';\nimport { UserSchema, UserSchemaNoRequired } from '../schemes/user';\nimport { TUser } from '../types/user';\n\nconst validator = createValidator();\n\nexport const router = express.Router();\n\nrouter.route('/users')\n    .get(async (req, res, next) => {\n        try {\n            const { login } = req.query;\n            if (login) {\n                return res.json(await getAutoSuggestUsers(req.query));\n            }\n            res.json(await getUsersList());\n        }\n        catch (err) {\n            return next(err);\n        }\n    })\n\n    .post(validator.body(UserSchema), async (req, res, next) => {\n        try {\n            const user: TUser = await createUser(req.body);\n            if (!user) {\n                return res.status(404)\n                    .json({ message: `User with login ${req.body.login} already exists` });\n            }\n            res.json(user);\n        }\n        catch (err) {\n            return next(err);\n        }\n    });\n\nrouter.route('/users/:id')\n    .get(async (req, res, next) => {\n        try {\n            const user: TUser = await getUser(Number(req.params.id));\n            if (!user) {\n                return res.status(404)\n                    .json({ message: `User with id ${req.params.id} not found` });\n            }\n            res.json(user);\n        }\n        catch (err) {\n            return next(err);\n        }\n    })\n\n    .delete(async (req, res, next) => {\n        try {\n            const result: [number, TUser[]] = await deleteUser(Number(req.params.id));\n            if (!result[0]) {\n                return res.status(404)\n                    .json({ message: `User with id ${req.params.id} not found` });\n            }\n            res.json(result);\n        }\n        catch (err) {\n            return next(err)\n        }\n    })\n\n    .put(validator.body(UserSchemaNoRequired), async (req, res, next) => {\n        try {\n            const result: [number, TUser[]] = await updateUser(Number(req.params.id), req.body);\n            if (!result[0]) {\n                return res.status(404)\n                    .json({ message: `User with id ${req.params.id} not found` });\n            }\n            res.json(result);\n        }\n        catch (err) {\n            return next(err)\n        }\n    });\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hometask_2/controllers/user.ts	(revision a45450bb740b0016f18a55ceb5cc97c46b97257b)
+++ hometask_2/controllers/user.ts	(date 1585893070482)
@@ -11,6 +11,7 @@
 router.route('/users')
     .get(async (req, res, next) => {
         try {
+            throw new Error('UUUUUUUUU');
             const { login } = req.query;
             if (login) {
                 return res.json(await getAutoSuggestUsers(req.query));
Index: hometask_2/logger/logging.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { isEmpty } from '../helper/isEmpty';\nimport debug from 'debug';\n\nconst log = debug('method');\nconst logErr = debug('error');\n\nexport const logTextError = (...text: any) => logErr.log(...text);\n\nexport const loggerMiddleware = (req: any, res: any, next: any) => {\n    const params = isEmpty(req.query) || isEmpty(req.body) || {};\n    log(req.method, req.path, 'arguments:', params);\n    next();\n};\n\nexport const errorHandler = (err: any, req: any, res: any) => {\n    const params = isEmpty(req.query) || isEmpty(req.body);\n    logErr(req.method, 'arguments:', params, 'message', err.message);\n    res.status(500);\n    res.json({message: 'Something went wrong'});\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hometask_2/logger/logging.ts	(revision a45450bb740b0016f18a55ceb5cc97c46b97257b)
+++ hometask_2/logger/logging.ts	(date 1585893142738)
@@ -12,7 +12,7 @@
     next();
 };
 
-export const errorHandler = (err: any, req: any, res: any) => {
+export const errorHandler = (err: any, req: any, res: any, next: any) => {
     const params = isEmpty(req.query) || isEmpty(req.body);
     logErr(req.method, 'arguments:', params, 'message', err.message);
     res.status(500);
Index: hometask_2/controllers/authenticate.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getUserByLogin, getUsersList} from \"../services/user\";\nimport {checkToken} from \"../middlewares/checkToken\";\n\nexport const router = express.Router();\n\nrouter.route('/authenticate')\n    .post(async (req, res, next) => {\n        try {\n            const employee = await getUserByLogin((req.body.login)).then(res => res);\n\n            if(employee === undefined || employee.password !== req.body.password){\n                res.status(403).send({success: false, message: 'Bad login/password combinator'})\n            }\n            else{\n                const payload = {'login': employee.login};\n                const token = jwt.sign(payload, 'secret', {expiresIn: 30});\n                res.send(token);\n            }\n        }\n        catch(err) {\n            return next(err)\n        }\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hometask_2/controllers/authenticate.ts	(revision a45450bb740b0016f18a55ceb5cc97c46b97257b)
+++ hometask_2/controllers/authenticate.ts	(date 1585893051847)
@@ -1,7 +1,6 @@
 import express from 'express';
 import jwt from 'jsonwebtoken';
-import { getUserByLogin, getUsersList} from "../services/user";
-import {checkToken} from "../middlewares/checkToken";
+import { getUserByLogin} from "../services/user";
 
 export const router = express.Router();
 
